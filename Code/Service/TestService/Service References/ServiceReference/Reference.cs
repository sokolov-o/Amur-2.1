//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestService.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityAttrValue", Namespace="http://schemas.datacontract.org/2004/07/FERHRI.Amur.Meta")]
    [System.SerializableAttribute()]
    public partial class EntityAttrValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AttrTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateSField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EntityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AttrTypeId {
            get {
                return this.AttrTypeIdField;
            }
            set {
                if ((this.AttrTypeIdField.Equals(value) != true)) {
                    this.AttrTypeIdField = value;
                    this.RaisePropertyChanged("AttrTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateS {
            get {
                return this.DateSField;
            }
            set {
                if ((this.DateSField.Equals(value) != true)) {
                    this.DateSField = value;
                    this.RaisePropertyChanged("DateS");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EntityId {
            get {
                return this.EntityIdField;
            }
            set {
                if ((this.EntityIdField.Equals(value) != true)) {
                    this.EntityIdField = value;
                    this.RaisePropertyChanged("EntityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Site", Namespace="http://schemas.datacontract.org/2004/07/FERHRI.Amur.Meta")]
    [System.SerializableAttribute()]
    public partial class Site : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SiteTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StationIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SiteTypeId {
            get {
                return this.SiteTypeIdField;
            }
            set {
                if ((this.SiteTypeIdField.Equals(value) != true)) {
                    this.SiteTypeIdField = value;
                    this.RaisePropertyChanged("SiteTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StationId {
            get {
                return this.StationIdField;
            }
            set {
                if ((this.StationIdField.Equals(value) != true)) {
                    this.StationIdField = value;
                    this.RaisePropertyChanged("StationId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Station", Namespace="http://schemas.datacontract.org/2004/07/FERHRI.Amur.Meta")]
    [System.SerializableAttribute()]
    public partial class Station : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TypeIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TypeId {
            get {
                return this.TypeIdField;
            }
            set {
                if ((this.TypeIdField.Equals(value) != true)) {
                    this.TypeIdField = value;
                    this.RaisePropertyChanged("TypeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StationType", Namespace="http://schemas.datacontract.org/2004/07/FERHRI.Amur.Meta")]
    [System.SerializableAttribute()]
    public partial class StationType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameShortField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameShort {
            get {
                return this.NameShortField;
            }
            set {
                if ((object.ReferenceEquals(this.NameShortField, value) != true)) {
                    this.NameShortField = value;
                    this.RaisePropertyChanged("NameShort");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SiteType", Namespace="http://schemas.datacontract.org/2004/07/FERHRI.Amur.Meta")]
    [System.SerializableAttribute()]
    public partial class SiteType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameShortField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameShort {
            get {
                return this.NameShortField;
            }
            set {
                if ((object.ReferenceEquals(this.NameShortField, value) != true)) {
                    this.NameShortField = value;
                    this.RaisePropertyChanged("NameShort");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Variable", Namespace="http://schemas.datacontract.org/2004/07/FERHRI.Amur.Meta")]
    [System.SerializableAttribute()]
    public partial class Variable : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DataTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GeneralCategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SampleMediumIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimeSupportField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UnitIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ValueTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VariableTypeIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DataTypeId {
            get {
                return this.DataTypeIdField;
            }
            set {
                if ((this.DataTypeIdField.Equals(value) != true)) {
                    this.DataTypeIdField = value;
                    this.RaisePropertyChanged("DataTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GeneralCategoryId {
            get {
                return this.GeneralCategoryIdField;
            }
            set {
                if ((this.GeneralCategoryIdField.Equals(value) != true)) {
                    this.GeneralCategoryIdField = value;
                    this.RaisePropertyChanged("GeneralCategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameC {
            get {
                return this.NameCField;
            }
            set {
                if ((object.ReferenceEquals(this.NameCField, value) != true)) {
                    this.NameCField = value;
                    this.RaisePropertyChanged("NameC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SampleMediumId {
            get {
                return this.SampleMediumIdField;
            }
            set {
                if ((this.SampleMediumIdField.Equals(value) != true)) {
                    this.SampleMediumIdField = value;
                    this.RaisePropertyChanged("SampleMediumId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimeId {
            get {
                return this.TimeIdField;
            }
            set {
                if ((this.TimeIdField.Equals(value) != true)) {
                    this.TimeIdField = value;
                    this.RaisePropertyChanged("TimeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimeSupport {
            get {
                return this.TimeSupportField;
            }
            set {
                if ((this.TimeSupportField.Equals(value) != true)) {
                    this.TimeSupportField = value;
                    this.RaisePropertyChanged("TimeSupport");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UnitId {
            get {
                return this.UnitIdField;
            }
            set {
                if ((this.UnitIdField.Equals(value) != true)) {
                    this.UnitIdField = value;
                    this.RaisePropertyChanged("UnitId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ValueTypeId {
            get {
                return this.ValueTypeIdField;
            }
            set {
                if ((this.ValueTypeIdField.Equals(value) != true)) {
                    this.ValueTypeIdField = value;
                    this.RaisePropertyChanged("ValueTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VariableTypeId {
            get {
                return this.VariableTypeIdField;
            }
            set {
                if ((this.VariableTypeIdField.Equals(value) != true)) {
                    this.VariableTypeIdField = value;
                    this.RaisePropertyChanged("VariableTypeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataValue", Namespace="http://schemas.datacontract.org/2004/07/FERHRI.Amur.Data")]
    [System.SerializableAttribute()]
    public partial class DataValue : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CatalogIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateLOCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte FlagAQCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float UTCOffsetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CatalogId {
            get {
                return this.CatalogIdField;
            }
            set {
                if ((this.CatalogIdField.Equals(value) != true)) {
                    this.CatalogIdField = value;
                    this.RaisePropertyChanged("CatalogId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateLOC {
            get {
                return this.DateLOCField;
            }
            set {
                if ((this.DateLOCField.Equals(value) != true)) {
                    this.DateLOCField = value;
                    this.RaisePropertyChanged("DateLOC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte FlagAQC {
            get {
                return this.FlagAQCField;
            }
            set {
                if ((this.FlagAQCField.Equals(value) != true)) {
                    this.FlagAQCField = value;
                    this.RaisePropertyChanged("FlagAQC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float UTCOffset {
            get {
                return this.UTCOffsetField;
            }
            set {
                if ((this.UTCOffsetField.Equals(value) != true)) {
                    this.UTCOffsetField = value;
                    this.RaisePropertyChanged("UTCOffset");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Catalog", Namespace="http://schemas.datacontract.org/2004/07/FERHRI.Amur.Data")]
    [System.SerializableAttribute()]
    public partial class Catalog : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsClimateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MethodIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OffsetTypeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double OffsetValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SiteIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SourceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VariableIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsClimate {
            get {
                return this.IsClimateField;
            }
            set {
                if ((this.IsClimateField.Equals(value) != true)) {
                    this.IsClimateField = value;
                    this.RaisePropertyChanged("IsClimate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MethodId {
            get {
                return this.MethodIdField;
            }
            set {
                if ((this.MethodIdField.Equals(value) != true)) {
                    this.MethodIdField = value;
                    this.RaisePropertyChanged("MethodId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OffsetTypeId {
            get {
                return this.OffsetTypeIdField;
            }
            set {
                if ((this.OffsetTypeIdField.Equals(value) != true)) {
                    this.OffsetTypeIdField = value;
                    this.RaisePropertyChanged("OffsetTypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double OffsetValue {
            get {
                return this.OffsetValueField;
            }
            set {
                if ((this.OffsetValueField.Equals(value) != true)) {
                    this.OffsetValueField = value;
                    this.RaisePropertyChanged("OffsetValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SiteId {
            get {
                return this.SiteIdField;
            }
            set {
                if ((this.SiteIdField.Equals(value) != true)) {
                    this.SiteIdField = value;
                    this.RaisePropertyChanged("SiteId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SourceId {
            get {
                return this.SourceIdField;
            }
            set {
                if ((this.SourceIdField.Equals(value) != true)) {
                    this.SourceIdField = value;
                    this.RaisePropertyChanged("SourceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VariableId {
            get {
                return this.VariableIdField;
            }
            set {
                if ((this.VariableIdField.Equals(value) != true)) {
                    this.VariableIdField = value;
                    this.RaisePropertyChanged("VariableId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataSource", Namespace="http://schemas.datacontract.org/2004/07/FERHRI.Amur.Data")]
    [System.SerializableAttribute()]
    public partial class DataSource : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CodeFormIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateLOCInsertField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateUTCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateUTCRecieveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SiteIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CodeFormId {
            get {
                return this.CodeFormIdField;
            }
            set {
                if ((this.CodeFormIdField.Equals(value) != true)) {
                    this.CodeFormIdField = value;
                    this.RaisePropertyChanged("CodeFormId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateLOCInsert {
            get {
                return this.DateLOCInsertField;
            }
            set {
                if ((this.DateLOCInsertField.Equals(value) != true)) {
                    this.DateLOCInsertField = value;
                    this.RaisePropertyChanged("DateLOCInsert");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateUTC {
            get {
                return this.DateUTCField;
            }
            set {
                if ((this.DateUTCField.Equals(value) != true)) {
                    this.DateUTCField = value;
                    this.RaisePropertyChanged("DateUTC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateUTCRecieve {
            get {
                return this.DateUTCRecieveField;
            }
            set {
                if ((this.DateUTCRecieveField.Equals(value) != true)) {
                    this.DateUTCRecieveField = value;
                    this.RaisePropertyChanged("DateUTCRecieve");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Hash {
            get {
                return this.HashField;
            }
            set {
                if ((object.ReferenceEquals(this.HashField, value) != true)) {
                    this.HashField = value;
                    this.RaisePropertyChanged("Hash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SiteId {
            get {
                return this.SiteIdField;
            }
            set {
                if ((this.SiteIdField.Equals(value) != true)) {
                    this.SiteIdField = value;
                    this.RaisePropertyChanged("SiteId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value {
            get {
                return this.ValueField;
            }
            set {
                if ((object.ReferenceEquals(this.ValueField, value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Open", ReplyAction="http://tempuri.org/IService/OpenResponse")]
        int Open(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Open", ReplyAction="http://tempuri.org/IService/OpenResponse")]
        System.Threading.Tasks.Task<int> OpenAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Close", ReplyAction="http://tempuri.org/IService/CloseResponse")]
        void Close(int hSvc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Close", ReplyAction="http://tempuri.org/IService/CloseResponse")]
        System.Threading.Tasks.Task CloseAsync(int hSvc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSiteAttrValue", ReplyAction="http://tempuri.org/IService/GetSiteAttrValueResponse")]
        TestService.ServiceReference.EntityAttrValue GetSiteAttrValue(int hSvc, int siteId, int siteAttrTypeId, System.DateTime dateActual);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSiteAttrValue", ReplyAction="http://tempuri.org/IService/GetSiteAttrValueResponse")]
        System.Threading.Tasks.Task<TestService.ServiceReference.EntityAttrValue> GetSiteAttrValueAsync(int hSvc, int siteId, int siteAttrTypeId, System.DateTime dateActual);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSitesByType", ReplyAction="http://tempuri.org/IService/GetSitesByTypeResponse")]
        TestService.ServiceReference.Site[] GetSitesByType(int hSvc, int siteTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSitesByType", ReplyAction="http://tempuri.org/IService/GetSitesByTypeResponse")]
        System.Threading.Tasks.Task<TestService.ServiceReference.Site[]> GetSitesByTypeAsync(int hSvc, int siteTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStationByIndex", ReplyAction="http://tempuri.org/IService/GetStationByIndexResponse")]
        TestService.ServiceReference.Station GetStationByIndex(int hSvc, string index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStationByIndex", ReplyAction="http://tempuri.org/IService/GetStationByIndexResponse")]
        System.Threading.Tasks.Task<TestService.ServiceReference.Station> GetStationByIndexAsync(int hSvc, string index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStationsByList", ReplyAction="http://tempuri.org/IService/GetStationsByListResponse")]
        TestService.ServiceReference.Station[] GetStationsByList(int hSvc, int[] stationIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStationsByList", ReplyAction="http://tempuri.org/IService/GetStationsByListResponse")]
        System.Threading.Tasks.Task<TestService.ServiceReference.Station[]> GetStationsByListAsync(int hSvc, int[] stationIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStationTypes", ReplyAction="http://tempuri.org/IService/GetStationTypesResponse")]
        TestService.ServiceReference.StationType[] GetStationTypes(int hSvc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetStationTypes", ReplyAction="http://tempuri.org/IService/GetStationTypesResponse")]
        System.Threading.Tasks.Task<TestService.ServiceReference.StationType[]> GetStationTypesAsync(int hSvc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSitesByStation", ReplyAction="http://tempuri.org/IService/GetSitesByStationResponse")]
        TestService.ServiceReference.Site[] GetSitesByStation(int hSvc, int stationId, System.Nullable<int> siteTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSitesByStation", ReplyAction="http://tempuri.org/IService/GetSitesByStationResponse")]
        System.Threading.Tasks.Task<TestService.ServiceReference.Site[]> GetSitesByStationAsync(int hSvc, int stationId, System.Nullable<int> siteTypeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSiteTypes", ReplyAction="http://tempuri.org/IService/GetSiteTypesResponse")]
        TestService.ServiceReference.SiteType[] GetSiteTypes(int hSvc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSiteTypes", ReplyAction="http://tempuri.org/IService/GetSiteTypesResponse")]
        System.Threading.Tasks.Task<TestService.ServiceReference.SiteType[]> GetSiteTypesAsync(int hSvc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSitesByList", ReplyAction="http://tempuri.org/IService/GetSitesByListResponse")]
        TestService.ServiceReference.Site[] GetSitesByList(int hSvc, int[] siteIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetSitesByList", ReplyAction="http://tempuri.org/IService/GetSitesByListResponse")]
        System.Threading.Tasks.Task<TestService.ServiceReference.Site[]> GetSitesByListAsync(int hSvc, int[] siteIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetVariablesByList", ReplyAction="http://tempuri.org/IService/GetVariablesByListResponse")]
        TestService.ServiceReference.Variable[] GetVariablesByList(int hSvc, int[] variableIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetVariablesByList", ReplyAction="http://tempuri.org/IService/GetVariablesByListResponse")]
        System.Threading.Tasks.Task<TestService.ServiceReference.Variable[]> GetVariablesByListAsync(int hSvc, int[] variableIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetVariablesAll", ReplyAction="http://tempuri.org/IService/GetVariablesAllResponse")]
        TestService.ServiceReference.Variable[] GetVariablesAll(int hSvc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetVariablesAll", ReplyAction="http://tempuri.org/IService/GetVariablesAllResponse")]
        System.Threading.Tasks.Task<TestService.ServiceReference.Variable[]> GetVariablesAllAsync(int hSvc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataValues", ReplyAction="http://tempuri.org/IService/GetDataValuesResponse")]
        TestService.ServiceReference.DataValue[] GetDataValues(int hSvc, System.DateTime dateSLOC, System.DateTime dateFLOC, int[] siteId, int[] variableId, System.Nullable<int> offsetTypeId, System.Nullable<double> offsetValue, bool isOneValue, bool isSelectDeleted, System.Nullable<int> methodId, System.Nullable<int> sourceId, System.Nullable<byte> flagAQC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetDataValues", ReplyAction="http://tempuri.org/IService/GetDataValuesResponse")]
        System.Threading.Tasks.Task<TestService.ServiceReference.DataValue[]> GetDataValuesAsync(int hSvc, System.DateTime dateSLOC, System.DateTime dateFLOC, int[] siteId, int[] variableId, System.Nullable<int> offsetTypeId, System.Nullable<double> offsetValue, bool isOneValue, bool isSelectDeleted, System.Nullable<int> methodId, System.Nullable<int> sourceId, System.Nullable<byte> flagAQC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/TestDataValues", ReplyAction="http://tempuri.org/IService/TestDataValuesResponse")]
        TestService.ServiceReference.DataValue[] TestDataValues(int hSvc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/TestDataValues", ReplyAction="http://tempuri.org/IService/TestDataValuesResponse")]
        System.Threading.Tasks.Task<TestService.ServiceReference.DataValue[]> TestDataValuesAsync(int hSvc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCatalogListById", ReplyAction="http://tempuri.org/IService/GetCatalogListByIdResponse")]
        TestService.ServiceReference.Catalog[] GetCatalogListById(int hSvc, int[] ctlId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCatalogListById", ReplyAction="http://tempuri.org/IService/GetCatalogListByIdResponse")]
        System.Threading.Tasks.Task<TestService.ServiceReference.Catalog[]> GetCatalogListByIdAsync(int hSvc, int[] ctlId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCatalogList", ReplyAction="http://tempuri.org/IService/GetCatalogListResponse")]
        TestService.ServiceReference.Catalog[] GetCatalogList(int hSvc, int[] siteId, int[] varId, System.Nullable<int> offsetTypeId, System.Nullable<int> methodId, System.Nullable<int> sourceId, System.Nullable<double> offsetValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCatalogList", ReplyAction="http://tempuri.org/IService/GetCatalogListResponse")]
        System.Threading.Tasks.Task<TestService.ServiceReference.Catalog[]> GetCatalogListAsync(int hSvc, int[] siteId, int[] varId, System.Nullable<int> offsetTypeId, System.Nullable<int> methodId, System.Nullable<int> sourceId, System.Nullable<double> offsetValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCatalog", ReplyAction="http://tempuri.org/IService/GetCatalogResponse")]
        TestService.ServiceReference.Catalog GetCatalog(int hSvc, int siteId, int varId, int offsetTypeId, int methodId, int sourceId, double offsetValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCatalog", ReplyAction="http://tempuri.org/IService/GetCatalogResponse")]
        System.Threading.Tasks.Task<TestService.ServiceReference.Catalog> GetCatalogAsync(int hSvc, int siteId, int varId, int offsetTypeId, int methodId, int sourceId, double offsetValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveStation", ReplyAction="http://tempuri.org/IService/SaveStationResponse")]
        int SaveStation(int hSvc, TestService.ServiceReference.Station station);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveStation", ReplyAction="http://tempuri.org/IService/SaveStationResponse")]
        System.Threading.Tasks.Task<int> SaveStationAsync(int hSvc, TestService.ServiceReference.Station station);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveDataValue", ReplyAction="http://tempuri.org/IService/SaveDataValueResponse")]
        long SaveDataValue(int hSvc, TestService.ServiceReference.DataValue dv);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveDataValue", ReplyAction="http://tempuri.org/IService/SaveDataValueResponse")]
        System.Threading.Tasks.Task<long> SaveDataValueAsync(int hSvc, TestService.ServiceReference.DataValue dv);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveDataValueXSource", ReplyAction="http://tempuri.org/IService/SaveDataValueXSourceResponse")]
        bool SaveDataValueXSource(int hSvc, int dataValueId, long dataSourceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveDataValueXSource", ReplyAction="http://tempuri.org/IService/SaveDataValueXSourceResponse")]
        System.Threading.Tasks.Task<bool> SaveDataValueXSourceAsync(int hSvc, int dataValueId, long dataSourceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveCatalog", ReplyAction="http://tempuri.org/IService/SaveCatalogResponse")]
        TestService.ServiceReference.Catalog SaveCatalog(int hSvc, TestService.ServiceReference.Catalog catalog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveCatalog", ReplyAction="http://tempuri.org/IService/SaveCatalogResponse")]
        System.Threading.Tasks.Task<TestService.ServiceReference.Catalog> SaveCatalogAsync(int hSvc, TestService.ServiceReference.Catalog catalog);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveDataSource", ReplyAction="http://tempuri.org/IService/SaveDataSourceResponse")]
        long SaveDataSource(int hSvc, TestService.ServiceReference.DataSource dataSource);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SaveDataSource", ReplyAction="http://tempuri.org/IService/SaveDataSourceResponse")]
        System.Threading.Tasks.Task<long> SaveDataSourceAsync(int hSvc, TestService.ServiceReference.DataSource dataSource);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : TestService.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<TestService.ServiceReference.IService>, TestService.ServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Open(string userName, string password) {
            return base.Channel.Open(userName, password);
        }
        
        public System.Threading.Tasks.Task<int> OpenAsync(string userName, string password) {
            return base.Channel.OpenAsync(userName, password);
        }
        
        public void Close(int hSvc) {
            base.Channel.Close(hSvc);
        }
        
        public System.Threading.Tasks.Task CloseAsync(int hSvc) {
            return base.Channel.CloseAsync(hSvc);
        }
        
        public TestService.ServiceReference.EntityAttrValue GetSiteAttrValue(int hSvc, int siteId, int siteAttrTypeId, System.DateTime dateActual) {
            return base.Channel.GetSiteAttrValue(hSvc, siteId, siteAttrTypeId, dateActual);
        }
        
        public System.Threading.Tasks.Task<TestService.ServiceReference.EntityAttrValue> GetSiteAttrValueAsync(int hSvc, int siteId, int siteAttrTypeId, System.DateTime dateActual) {
            return base.Channel.GetSiteAttrValueAsync(hSvc, siteId, siteAttrTypeId, dateActual);
        }
        
        public TestService.ServiceReference.Site[] GetSitesByType(int hSvc, int siteTypeId) {
            return base.Channel.GetSitesByType(hSvc, siteTypeId);
        }
        
        public System.Threading.Tasks.Task<TestService.ServiceReference.Site[]> GetSitesByTypeAsync(int hSvc, int siteTypeId) {
            return base.Channel.GetSitesByTypeAsync(hSvc, siteTypeId);
        }
        
        public TestService.ServiceReference.Station GetStationByIndex(int hSvc, string index) {
            return base.Channel.GetStationByIndex(hSvc, index);
        }
        
        public System.Threading.Tasks.Task<TestService.ServiceReference.Station> GetStationByIndexAsync(int hSvc, string index) {
            return base.Channel.GetStationByIndexAsync(hSvc, index);
        }
        
        public TestService.ServiceReference.Station[] GetStationsByList(int hSvc, int[] stationIdList) {
            return base.Channel.GetStationsByList(hSvc, stationIdList);
        }
        
        public System.Threading.Tasks.Task<TestService.ServiceReference.Station[]> GetStationsByListAsync(int hSvc, int[] stationIdList) {
            return base.Channel.GetStationsByListAsync(hSvc, stationIdList);
        }
        
        public TestService.ServiceReference.StationType[] GetStationTypes(int hSvc) {
            return base.Channel.GetStationTypes(hSvc);
        }
        
        public System.Threading.Tasks.Task<TestService.ServiceReference.StationType[]> GetStationTypesAsync(int hSvc) {
            return base.Channel.GetStationTypesAsync(hSvc);
        }
        
        public TestService.ServiceReference.Site[] GetSitesByStation(int hSvc, int stationId, System.Nullable<int> siteTypeId) {
            return base.Channel.GetSitesByStation(hSvc, stationId, siteTypeId);
        }
        
        public System.Threading.Tasks.Task<TestService.ServiceReference.Site[]> GetSitesByStationAsync(int hSvc, int stationId, System.Nullable<int> siteTypeId) {
            return base.Channel.GetSitesByStationAsync(hSvc, stationId, siteTypeId);
        }
        
        public TestService.ServiceReference.SiteType[] GetSiteTypes(int hSvc) {
            return base.Channel.GetSiteTypes(hSvc);
        }
        
        public System.Threading.Tasks.Task<TestService.ServiceReference.SiteType[]> GetSiteTypesAsync(int hSvc) {
            return base.Channel.GetSiteTypesAsync(hSvc);
        }
        
        public TestService.ServiceReference.Site[] GetSitesByList(int hSvc, int[] siteIdList) {
            return base.Channel.GetSitesByList(hSvc, siteIdList);
        }
        
        public System.Threading.Tasks.Task<TestService.ServiceReference.Site[]> GetSitesByListAsync(int hSvc, int[] siteIdList) {
            return base.Channel.GetSitesByListAsync(hSvc, siteIdList);
        }
        
        public TestService.ServiceReference.Variable[] GetVariablesByList(int hSvc, int[] variableIdList) {
            return base.Channel.GetVariablesByList(hSvc, variableIdList);
        }
        
        public System.Threading.Tasks.Task<TestService.ServiceReference.Variable[]> GetVariablesByListAsync(int hSvc, int[] variableIdList) {
            return base.Channel.GetVariablesByListAsync(hSvc, variableIdList);
        }
        
        public TestService.ServiceReference.Variable[] GetVariablesAll(int hSvc) {
            return base.Channel.GetVariablesAll(hSvc);
        }
        
        public System.Threading.Tasks.Task<TestService.ServiceReference.Variable[]> GetVariablesAllAsync(int hSvc) {
            return base.Channel.GetVariablesAllAsync(hSvc);
        }
        
        public TestService.ServiceReference.DataValue[] GetDataValues(int hSvc, System.DateTime dateSLOC, System.DateTime dateFLOC, int[] siteId, int[] variableId, System.Nullable<int> offsetTypeId, System.Nullable<double> offsetValue, bool isOneValue, bool isSelectDeleted, System.Nullable<int> methodId, System.Nullable<int> sourceId, System.Nullable<byte> flagAQC) {
            return base.Channel.GetDataValues(hSvc, dateSLOC, dateFLOC, siteId, variableId, offsetTypeId, offsetValue, isOneValue, isSelectDeleted, methodId, sourceId, flagAQC);
        }
        
        public System.Threading.Tasks.Task<TestService.ServiceReference.DataValue[]> GetDataValuesAsync(int hSvc, System.DateTime dateSLOC, System.DateTime dateFLOC, int[] siteId, int[] variableId, System.Nullable<int> offsetTypeId, System.Nullable<double> offsetValue, bool isOneValue, bool isSelectDeleted, System.Nullable<int> methodId, System.Nullable<int> sourceId, System.Nullable<byte> flagAQC) {
            return base.Channel.GetDataValuesAsync(hSvc, dateSLOC, dateFLOC, siteId, variableId, offsetTypeId, offsetValue, isOneValue, isSelectDeleted, methodId, sourceId, flagAQC);
        }
        
        public TestService.ServiceReference.DataValue[] TestDataValues(int hSvc) {
            return base.Channel.TestDataValues(hSvc);
        }
        
        public System.Threading.Tasks.Task<TestService.ServiceReference.DataValue[]> TestDataValuesAsync(int hSvc) {
            return base.Channel.TestDataValuesAsync(hSvc);
        }
        
        public TestService.ServiceReference.Catalog[] GetCatalogListById(int hSvc, int[] ctlId) {
            return base.Channel.GetCatalogListById(hSvc, ctlId);
        }
        
        public System.Threading.Tasks.Task<TestService.ServiceReference.Catalog[]> GetCatalogListByIdAsync(int hSvc, int[] ctlId) {
            return base.Channel.GetCatalogListByIdAsync(hSvc, ctlId);
        }
        
        public TestService.ServiceReference.Catalog[] GetCatalogList(int hSvc, int[] siteId, int[] varId, System.Nullable<int> offsetTypeId, System.Nullable<int> methodId, System.Nullable<int> sourceId, System.Nullable<double> offsetValue) {
            return base.Channel.GetCatalogList(hSvc, siteId, varId, offsetTypeId, methodId, sourceId, offsetValue);
        }
        
        public System.Threading.Tasks.Task<TestService.ServiceReference.Catalog[]> GetCatalogListAsync(int hSvc, int[] siteId, int[] varId, System.Nullable<int> offsetTypeId, System.Nullable<int> methodId, System.Nullable<int> sourceId, System.Nullable<double> offsetValue) {
            return base.Channel.GetCatalogListAsync(hSvc, siteId, varId, offsetTypeId, methodId, sourceId, offsetValue);
        }
        
        public TestService.ServiceReference.Catalog GetCatalog(int hSvc, int siteId, int varId, int offsetTypeId, int methodId, int sourceId, double offsetValue) {
            return base.Channel.GetCatalog(hSvc, siteId, varId, offsetTypeId, methodId, sourceId, offsetValue);
        }
        
        public System.Threading.Tasks.Task<TestService.ServiceReference.Catalog> GetCatalogAsync(int hSvc, int siteId, int varId, int offsetTypeId, int methodId, int sourceId, double offsetValue) {
            return base.Channel.GetCatalogAsync(hSvc, siteId, varId, offsetTypeId, methodId, sourceId, offsetValue);
        }
        
        public int SaveStation(int hSvc, TestService.ServiceReference.Station station) {
            return base.Channel.SaveStation(hSvc, station);
        }
        
        public System.Threading.Tasks.Task<int> SaveStationAsync(int hSvc, TestService.ServiceReference.Station station) {
            return base.Channel.SaveStationAsync(hSvc, station);
        }
        
        public long SaveDataValue(int hSvc, TestService.ServiceReference.DataValue dv) {
            return base.Channel.SaveDataValue(hSvc, dv);
        }
        
        public System.Threading.Tasks.Task<long> SaveDataValueAsync(int hSvc, TestService.ServiceReference.DataValue dv) {
            return base.Channel.SaveDataValueAsync(hSvc, dv);
        }
        
        public bool SaveDataValueXSource(int hSvc, int dataValueId, long dataSourceId) {
            return base.Channel.SaveDataValueXSource(hSvc, dataValueId, dataSourceId);
        }
        
        public System.Threading.Tasks.Task<bool> SaveDataValueXSourceAsync(int hSvc, int dataValueId, long dataSourceId) {
            return base.Channel.SaveDataValueXSourceAsync(hSvc, dataValueId, dataSourceId);
        }
        
        public TestService.ServiceReference.Catalog SaveCatalog(int hSvc, TestService.ServiceReference.Catalog catalog) {
            return base.Channel.SaveCatalog(hSvc, catalog);
        }
        
        public System.Threading.Tasks.Task<TestService.ServiceReference.Catalog> SaveCatalogAsync(int hSvc, TestService.ServiceReference.Catalog catalog) {
            return base.Channel.SaveCatalogAsync(hSvc, catalog);
        }
        
        public long SaveDataSource(int hSvc, TestService.ServiceReference.DataSource dataSource) {
            return base.Channel.SaveDataSource(hSvc, dataSource);
        }
        
        public System.Threading.Tasks.Task<long> SaveDataSourceAsync(int hSvc, TestService.ServiceReference.DataSource dataSource) {
            return base.Channel.SaveDataSourceAsync(hSvc, dataSource);
        }
    }
}
